{"version":3,"sources":["TaskContext/index.js","TaskContext/useLocalStorage.js","TaskCounter/index.js","TaskSearch/index.js","TaskList/index.js","TaskItem/index.js","CreateTaskButton/index.js","Modal/index.js","TaskForm/index.js","App/AppUI.js","App/index.js","index.js"],"names":["TaskContext","React","createContext","TaskProvider","props","itemName","initialValue","useState","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","parsedItem","localStorageItem","localStorage","getItem","JSON","parse","stringify","saveItem","newItem","stringifiedItem","useLocalStorage","tasks","saveTasks","searchValue","setSearchValue","openModal","setOpenModal","completedTasks","filter","task","completed","length","totalTasks","searchedTasks","searchText","toUpperCase","text","includes","Provider","value","toggleCompleteTask","indexTask","findIndex","newTasks","deleteTask","splice","addTask","push","children","TaskCounter","useContext","className","TaskSearch","placeholder","onChange","event","console","log","target","TaskList","TaskItem","onClick","onCompleted","onDeleted","CreateTaskButton","prevState","Modal","ReactDOM","createPortal","document","getElementById","TaskForm","newTaskValue","setnewTaskValue","onSubmit","preventDefault","type","AppIU","Fragment","map","App","render"],"mappings":"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","file":"static/js/main.a40f54fd.chunk.js","sourcesContent":["import React from \"react\";\nimport {useLocalStorage} from './useLocalStorage';\n\n\nconst TaskContext = React.createContext();\n\nfunction TaskProvider(props) {\n\n  const {\n    item: tasks,\n    saveItem: saveTasks,\n    loading,\n    error,\n  } = useLocalStorage('TASKS_V1', []);\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const [openModal, setOpenModal] = React.useState(false)\n\n  const completedTasks = tasks.filter(task => !!task.completed).length;\n  const totalTasks = tasks.length;\n\n  let searchedTasks = [];\n\n  if(!searchValue.length >= 1) {\n    searchedTasks = tasks;\n  } else {\n    searchedTasks = tasks.filter(task => {\n      const searchText = searchValue.toUpperCase();\n      const taskText = task.text.toUpperCase();\n      return taskText.includes(searchText);\n    })\n  }\n\n  const addTask = (text) => {\n    const newTasks = [...tasks];\n    newTasks.push({\n      completed: false,\n      text,\n    })\n    saveTasks(newTasks);\n  }\n\n  const toggleCompleteTask = (text) => {\n    const indexTask = tasks.findIndex(task => task.text === text);\n    const newTasks = [...tasks];\n    newTasks[indexTask].completed = !newTasks[indexTask].completed;\n    saveTasks(newTasks);\n  }\n\n  const deleteTask = (text) => {\n    const indexTask = tasks.findIndex(task => task.text === text);\n    const newTasks = [...tasks];\n    newTasks.splice(indexTask, 1);\n    saveTasks(newTasks);\n  }\n\n  return (\n    <TaskContext.Provider value={{\n      loading,\n      error,\n      completedTasks,\n      totalTasks,\n      searchValue,\n      setSearchValue,\n      searchedTasks,\n      toggleCompleteTask,\n      deleteTask,\n      addTask,\n      openModal,\n      setOpenModal,\n    }}>\n      {props.children}\n    </TaskContext.Provider>\n  );\n}\n\nexport { TaskContext, TaskProvider };","import React from 'react';\n\nfunction useLocalStorage(itemName, initialValue) {\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName);\n        let parsedItem;\n\n        if (!localStorageItem) {\n          localStorage.setItem(itemName, JSON.stringify(initialValue));\n          parsedItem = initialValue;\n        } else {\n          parsedItem = JSON.parse(localStorageItem);\n        }\n\n        setItem(parsedItem);\n        setLoading(false);\n      } catch(error) {\n        setError(error);\n      }\n    }, 1000);\n  }, []);\n\n  const saveItem = (newItem) => {\n    try {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch(error) {\n      setError(error);\n    }\n  };\n\n  return {\n    item,\n    saveItem,\n    loading,\n    error,\n  };\n}\n\nexport { useLocalStorage };","import React from 'react';\nimport { TaskContext } from '../TaskContext';\nimport './TaskCounter.css'\n\n\nfunction TaskCounter() {\n  const {completedTasks, totalTasks} = React.useContext(TaskContext)\n  return (\n    <h2 className=\"TaskCounter\">Has completado {completedTasks} de {totalTasks} Tareas</h2>\n  );\n}\n\nexport { TaskCounter };","import React from 'react';\nimport './TaskSearch.css'\nimport { TaskContext } from '../TaskContext';\n\nfunction TaskSearch() {\n\n  const {searchValue, setSearchValue} = React.useContext(TaskContext);\n\n  const onChangeValueSearch = (event) => {\n    console.log(event.target.value);\n    setSearchValue(event.target.value);\n  }\n  return (\n    <input\n      className=\"TaskSearch\"\n      placeholder=\"Buscar\"\n      onChange={onChangeValueSearch}\n      value={searchValue}\n      />\n  );\n}\n\nexport { TaskSearch };","import React from 'react';\nimport './TaskList.css'\n\n\nfunction TaskList(props) {\n  return (\n    <section>\n    <ul>\n      {props.children}\n    </ul>\n  </section>\n  );\n}\n\nexport { TaskList };","import React from 'react';\nimport './TaskItem.css'\n\nfunction TaskItem(props) {\n\n  return (\n    <li className=\"TaskItem\">\n    <span className={`Icon Icon-check ${props.completed && 'Icon-check--active'}`}\n      onClick={props.onCompleted}\n      >\n      âˆš\n    </span>\n    <p className={`TaskItem-p ${props.completed && 'TaskItem-p--complete'}`}>\n      {props.text}\n    </p>\n    <span className=\"Icon Icon-delete\"\n      onClick={props.onDeleted}\n      >\n      X\n    </span>\n  </li>\n  );\n}\n\nexport { TaskItem };","import React from 'react';\nimport './CreateTaskButton.css'\n\nfunction CreateTaskButton(props) {\n  const onClickButton = () => {\n    props.setOpenModal(prevState => !prevState);\n  }\n  return (\n    <button\n      className=\"CreateTaskButton\"\n      onClick={onClickButton}\n    >\n      +\n    </button>\n  );\n}\n\nexport { CreateTaskButton };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nfunction Modal({ children }) {\n  return ReactDOM.createPortal(\n    <div className=\"ModalBackground\">\n      {children}\n    </div>,\n    document.getElementById('modal')\n  );\n}\n\nexport { Modal };","import React from 'react';\nimport { TaskContext } from '../TaskContext'\nimport './TaskForm.css';\n\nfunction TaskForm() {\n\n  const [ newTaskValue, setnewTaskValue ] = React.useState('');\n\n  const onChange = (event) => {\n    setnewTaskValue(event.target.value);\n  }\n  const {\n    addTask,\n    setOpenModal\n  } = React.useContext(TaskContext);\n\n  const onCancel = () => {\n    setOpenModal(false);\n  }\n  const onSubmit = (event) => {\n    event.preventDefault();\n    addTask(newTaskValue);\n    setOpenModal(false);\n  }\n  return (\n    <form onSubmit={onSubmit} >\n      <label>Escribe tu nueva tarea</label>\n      <textarea\n        value = {newTaskValue}\n        onChange = {onChange}\n        placeholder = \"Escribe una nueva tarea\"\n      />\n      <div className=\"TaskForm-buttonContainer\">\n        <button\n          type=\"button\"\n          className=\"TaskForm-button TaskForm-button-cancel\"\n          onClick = {onCancel}\n        >\n          Cancelar\n        </button>\n\n        <button\n          className=\"TaskForm-button TaskForm-button-add\"\n          type= \"submit\"\n        >\n          AÃ±adir\n          </button>\n      </div>\n    </form>\n  );\n}\n\nexport { TaskForm };","import React from \"react\";\nimport {TaskCounter} from '../TaskCounter'\nimport {TaskSearch} from '../TaskSearch'\nimport {TaskList} from '../TaskList'\nimport {TaskItem} from '../TaskItem'\nimport {CreateTaskButton} from '../CreateTaskButton'\nimport { TaskContext } from '../TaskContext'\nimport { Modal } from '../Modal'\nimport { TaskForm } from '../TaskForm'\n\n\nfunction AppIU() {\n\n  const {\n    error, loading, searchedTasks, toggleCompleteTask,\n    deleteTask, openModal, setOpenModal } = React.useContext(TaskContext);\n\n  return (\n    <React.Fragment>\n      <TaskCounter />\n      <TaskSearch />\n\n      <TaskList>\n        { error && <p>tranquilo, vuelve a cargar la pagina</p>}\n        { loading && <p>Estamos cargando, un momento por favor</p>}\n        { (!loading && !searchedTasks.length) && <p>Crea tu primera tarea</p>}\n\n\n          {searchedTasks.map(task => (\n            <TaskItem\n              key={task.text}\n              text={task.text}\n              completed={task.completed}\n              onCompleted={() => toggleCompleteTask(task.text)}\n              onDeleted={() => deleteTask(task.text)}\n            />\n          ))}\n          </TaskList>\n          {openModal && (\n            <Modal>\n              <TaskForm />\n            </Modal>\n          )}\n      <CreateTaskButton\n        openModal={openModal}\n        setOpenModal={setOpenModal}\n      />\n    </React.Fragment>\n  );\n}\n\nexport { AppIU };","// import './App.css';\nimport React from 'react';\nimport {AppIU} from './AppUI'\nimport {TaskContext, TaskProvider} from '../TaskContext';\n\n\nfunction App() {\n\n\n  return (\n    <TaskProvider>\n      <AppIU/>\n    </TaskProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}